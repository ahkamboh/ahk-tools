
import { Controller } from "@hotwired/stimulus";
export default class extends Controller {
  static targets = ["content","resumeToggle", "stepfrom", "previous", "next", "downloadbtn", "progress", "barpercentage", "input", "resume", "workAdd", "workResume", "photoDisplay", "uploadText", "deleteText", "imgcontainerHider", "selectFont", "resumeheadingsfontchanger", "resumeFontchangerAll", "colorInput", "bgChanger", "textColorChanger","svgChanger" ,"downloadPDF", "cvCapture", "titleInput", "label", "aboutInput", "button", "loader", "form", "textarea", "submitBtn", 'editor', 'ckEditorContent',"skillAdd","skillAddResume","hobbyAdd","hobbyAddResume" , "referenceAddResume","referenceAdd","eduAddResume","eduAdd"];

  static counters = { work: Number, education: Number,reference: Number,skill: Number ,hobby: Number}
  
  connect() {
       // Add an event listener for beforeunload event
      //  window.addEventListener("beforeunload", this.beforeUnloadHandler);
    this.CKEditorAll();
    window.onload = function () {
      const inputFields = document.querySelectorAll("[data-cv-target=input]");
      const textareaFields = document.querySelectorAll("[data-cv-target~='textarea']");

      inputFields.forEach(function (inputField) {
        const initialValue = inputField.getAttribute("value");

        if (initialValue !== null) {
          inputField.value = initialValue;
          // Dispatch an 'input' event to trigger any associated functionality
          inputField.dispatchEvent(new Event("input"));
        }
      });


      textareaFields.forEach(function (textareaField) {
        const initialValue = textareaField.value;

        if (initialValue !== null) {
          textareaField.value = initialValue;

          // Dispatch an 'input' event to trigger any associated functionality
          textareaField.dispatchEvent(new Event("input"));
        }
      });
    };

    this.currentstepfrom = 1
    this.updateProgressBar()
    this.updateResumeField()
    // this.workAddTarget.dataset.currentPosition = 3;
    // this.skillAddTarget.dataset.currentPosition = 3;
    // this.hobbyAddTarget.dataset.currentPosition = 3;
    // this.eduAddTarget.dataset.currentPosition = 2;
    // this.referenceAddTarget.dataset.currentPosition = 0;
    this.workCounter=3;
    this.eduCounter=2;
    this.referenceCounter=0;
    this.skillCounter=3;
    this.hobbyCounter=3;
    this.rangeTargets.forEach((element, index) => {
      element.addEventListener("input", () => this.setDivWidth(element.value, this.rangeresumeTargets[index], this.levelTargets[index]))
    })
    this.element.addEventListener("click", this.downloadPDF.bind(this));



  }

  disconnect() {
    // Remove the event listener when the element is disconnected
    window.removeEventListener("beforeunload", this.beforeUnloadHandler);
  }


  beforeUnloadHandler(event) {
    // Prevent the default behavior of the event
    event.preventDefault();
    // Return an empty string
    return '';
  }

  updateWebpageTitle() {
    const titleInput = this.titleInputTarget;
    // Update the title of the webpage
    document.title = `${titleInput.innerText} Cv Generated by Applyace `;
  }

  displayResume() {
    let html = document.querySelector("html");
    this.resumeToggleTarget.classList.remove("hidden");
    // this.resumeToggleTarget.classList.remove("slide-out-left");
    // this.resumeToggleTarget.classList.add("slide-in-right");
    this.resumeToggleTarget.classList.add("block");
    // html.style.overflow='hidden'
  }
  hideResume() {
    let html = document.querySelector("html");
    this.resumeToggleTarget.classList.remove("block");
    this.resumeToggleTarget.classList.add("hidden");
    // this.resumeToggleTarget.classList.remove("slide-in-right");
    // this.resumeToggleTarget.classList.add("slide-out-left");
    // html.style.overflow='visible'

  }

  websiteoptional() {
    const disabledTargets = document.querySelectorAll('[data-cv-target="input"]');
    const emailTarget = document.querySelector('[data-cv-target="email"]');
    const deleteicon = document.querySelector('[data-cv-target="delete"]');
    const addicon = document.querySelector('[data-cv-target="add"]');
    const gridCols = document.querySelector('[data-cv-col="gridCols"]');

    if (deleteicon.classList.contains('hidden')) {
      addicon.classList.add('hidden')
      deleteicon.classList.remove('hidden')
    }
    else {
      deleteicon.classList.add('hidden')
      addicon.classList.remove('hidden')
    }

    // Check if there are at least 6 elements
    if (disabledTargets.length >= 6) {
      const sixthElement = disabledTargets[5];
      // Toggle the disabled property
      if (sixthElement.classList.contains('cursor-not-allowed'))
        sixthElement.classList.remove('cursor-not-allowed', 'bg-slate-100')
      else
        sixthElement.classList.add('cursor-not-allowed', 'bg-slate-100')
      sixthElement.disabled = !sixthElement.disabled;
    }
    // Toggle the visibility of the emailTarget
    if (emailTarget.classList.contains("hidden")) {
      emailTarget.classList.remove("hidden");
      emailTarget.classList.add("flex");

    } else {
      emailTarget.classList.remove("flex");
      emailTarget.classList.add("hidden");

    }

    if (gridCols.classList.contains("grid-cols-12")) {
      gridCols.classList.remove("grid-cols-12");
      gridCols.classList.add("grid-cols-16");

    } else {
      gridCols.classList.remove("grid-cols-16");
      gridCols.classList.add("grid-cols-12");
    }
  }



  next() {
    // Check if the next stepfrom exists
    if (this.currentstepfrom < this.stepfromTargets.length) {
      // Hide current stepfrom
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.add('hidden')
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.add('fadeIn')

      // Move to next stepfrom
      this.currentstepfrom += 1
      
      // Show next stepfrom
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.remove('hidden')
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.remove('fadeIn')

    }

    // Show the "Previous" button if not on the first stepfrom
    if (this.currentstepfrom > 1) {
      this.previousTarget.classList.remove('hidden')
    }

    // Hide the "Next" button and show the "downloadbtn" button if on the last stepfrom
    if (this.currentstepfrom == this.stepfromTargets.length) {
      this.nextTarget.classList.add('hidden')
      this.downloadbtnTarget.classList.remove('hidden')
      this.submitBtnTarget.classList.remove('hidden')

    }

    // Update progress bar and barpercentage
    this.updateProgressBar()
  }

  previous() {
    // Check if the previous stepfrom exists
    if (this.currentstepfrom > 1) {
      // Hide current stepfrom
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.add('hidden')
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.add('fadeIn')

      // Move to previous stepfrom
      this.currentstepfrom -= 1
      // Show previous stepfrom
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.remove('hidden')
      this.stepfromTargets.find(element => element.dataset.stepfromValue == this.currentstepfrom).classList.remove('fadeIn')

    } else {
      console.log("This is the first stepfrom.")
    }

    // Hide the "Previous" button if on the first stepfrom
    if (this.currentstepfrom == 1) {
      this.previousTarget.classList.add('hidden')
    }

    // Show the "Next" button and hide the "downloadbtn" button if not on the last stepfrom
    if (this.currentstepfrom < this.stepfromTargets.length) {
      this.nextTarget.classList.remove('hidden')
      this.downloadbtnTarget.classList.add('hidden')
      this.submitBtnTarget.classList.add('hidden')

    }

    // Update progress bar and barpercentage
    this.updateProgressBar()
  }
  updateProgressBar() {
    let roundedProgress;

    if (this.currentstepfrom === 1) {
      roundedProgress = 0;
    } else {
      const progress = (this.currentstepfrom / this.stepfromTargets.length) * 100;
      roundedProgress = Math.floor(progress / 10) * 10; // Round down to nearest 10%
    }

    this.progressTarget.style.width = `${roundedProgress}%`;
    this.barpercentageTarget.textContent = `${roundedProgress}%`;
  }

  updateResumeField() {
    this.inputTargets.forEach((inputElement) => {
      const resumeElement = this.resumeTargets.find(target => target.id === inputElement.id + 'Resume' || target.id === inputElement.id + 'Letter');

      if (resumeElement) {
        inputElement.addEventListener('input', function () {
          const inputText = inputElement.value;
          const formattedText = inputText.replace(/\n/g, '<br>');
          resumeElement.innerHTML = formattedText;

          if (['website', 'email', 'phone'].includes(inputElement.id)) {
            resumeElement.href = inputElement.id === 'website' ? 'https://' + inputElement.value :
              (inputElement.id === 'email' ? 'mailto:' + inputElement.value : 'tel:' + inputElement.value)
          }
        })
      }
    })
  }


 
  workFormAdd(temp) {
    console.log("work add before ")
    console.log(this.workCounter)
    if(this.workCounter%1==0.5)
      this.workCounter +0.5;
    else
      this.workCounter++;
      console.log("work add after ")
      console.log(this.workCounter)

    let editorCounter =  this.workCounter + 1;
    let currentPosition=this.workCounter;
    editorCounter++;

    let workFormDiv = document.createElement('div');
    workFormDiv.classList.add('grid', 'gap-5', 'items-center', 'relative', 'pt-6');

   if(temp=="temp1")
    workFormDiv.innerHTML = `

    <div class="flex gap-5 items-center">
    <div class="w-full">
      <label for="designation-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th Designation</label>
        <input  data-cv-target="input" id="designation-${currentPosition}th" placeholder="Manager" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
  </div>
  <div class="w-full">
    <label for="companyName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Company</label>
      <input data-cv-target="input" id="companyName-${currentPosition}th" placeholder="Softaims" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
  </div>
  </div>
  <div class="flex items-center gap-5">
    <div class="w-full">
      <label for="companyLocation-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Location</label>
        <input data-cv-target="input" id="companyLocation-${currentPosition}th" placeholder="DHA Lahore,Pakistan" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border"/>
    </div>
    <div class="w-full">
      <label for="companyDate-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Date</label>
        <input  data-cv-target="input" id="companyDate-${currentPosition}th" placeholder="Jan 2010-feb 2020" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
    </div>
  </div>


<div class="w-full">
<label for="workExperience-${currentPosition}th"  class="md:mt-0 mt-2 font-medium text-gray-700" data-cv-label="About Work Experience" > About Work Experience</label>
  <textarea data-cv-target="editor" data-cv-id="editor${editorCounter}"  id="workExperience-${currentPosition}th" name="third_job_about_work" rows="4" placeholder="I have immensely good Experience......" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border resize-none"></textarea>
  <button class="md:w-fit w-full flex my-3 md:justify-start justify-center  items-center  bg-gradient-to-br to-blue-950  from-sky-800 hover:bg-gradient-to-bl  py-2 px-4 border border-transparent shadow-sm text-xs font-medium rounded-md text-white  text-center" data-action="click->cv#generate" data-cv-button="About Work Experience" data-cv-label="About Work Experience" data-cv-id="editor${editorCounter}">
  <div class="">Auto Generate</div>
<img alt="Loading" class="w-5 h-5 ml-2 hidden  " data-cv-target="loader" src="https://cdn.pixabay.com/animation/2023/05/02/04/29/04-29-06-428_512.gif">
</button>
</div>
    `
   else if(temp=="temp2")
    workFormDiv.innerHTML = `
          <div class="flex gap-5 items-center">
          <div class="w-full">
            <label for="designation-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th Designation</label>
              <input  data-cv-target="input" id="designation-${currentPosition}th" placeholder="Manager" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
        </div>
        <div class="w-full">
          <label for="companyName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Company</label>
            <input data-cv-target="input" id="companyName-${currentPosition}th" placeholder="Softaims" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
        </div>
        </div>
        <div class="flex items-center gap-5">
          <div class="w-full">
            <label for="companyDate-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Date</label>
              <input  data-cv-target="input" id="companyDate-${currentPosition}th" placeholder="Jan 2010-feb 2020" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
          </div>
        </div>
        <div class="w-full">
        <label for="workExperience-${currentPosition}th"  class="md:mt-0 mt-2 font-medium text-gray-700" data-cv-label="About Work Experience" > About Work Experience</label>
        <textarea data-cv-target="editor" data-cv-id="editor${editorCounter}"  id="workExperience-${currentPosition}th" name="third_job_about_work" rows="4" placeholder="I have immensely good Experience......" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border resize-none"></textarea>
        <button class="md:w-fit w-full flex my-3 md:justify-start justify-center  items-center  bg-gradient-to-br to-blue-950  from-sky-800 hover:bg-gradient-to-bl  py-2 px-4 border border-transparent shadow-sm text-xs font-medium rounded-md text-white  text-center" data-action="click->cv#generate" data-cv-button="About Work Experience" data-cv-label="About Work Experience" data-cv-id="editor${editorCounter}">
        <div class="">Auto Generate</div>
        <img alt="Loading" class="w-5 h-5 ml-2 hidden  " data-cv-target="loader" src="https://cdn.pixabay.com/animation/2023/05/02/04/29/04-29-06-428_512.gif">
        </button>
        </div>
    `


    let addworkResumeDiv = document.createElement('div')
    let resumeId = `resumeworkAdd-${currentPosition}`
    addworkResumeDiv.id = resumeId
    if(temp=="temp1")
      addworkResumeDiv.innerHTML = `
      
      <div class="grid grid-cols-8">
        <div class="flex col-span-2 pr-2.5 year-section">
          <div class="pt-5">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
              fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round"
              stroke-linejoin="round" class="lucide lucide-chevron-right">
              <path d="m9 18 6-6-6-6" />
            </svg>
          </div>
          <div class="w-full">
            <div data-cv-target="resumeheadingsfontchanger"  class="text-base font-normal resumeFont ">Year</div>
            <div data-cv-target="resume" id="companyDate-${currentPosition}thResume"  class="text-sm font-normal  text-gray-500 break-all ">Jan 2010-feb 2021</div>
          </div>
        </div>
        <div  class="border-l-2  border-black col-span-6  pt-5 work-section">
          <div data-cv-target="resumeheadingsfontchanger" class="flex gap-5 items-start -translate-y-2  -translate-x-[9px] resumeFont">
            <div class="p-1.5 bg-white border-2 shadow-sm rounded-full white-dot "></div>
            <div  data-cv-target="resume" id="designation-${currentPosition}thResume" class="font-normal text-lg relative -mt-1   break-all work-position-name uppercase">Enter Your Position </div>
          </div>
          <div class="pl-[30px] pb-2 work-company-parent" >
            <div data-cv-target="resumeheadingsfontchanger"  class="flex justify-between gap-5 resumeFont  ">
              <div  data-cv-target="resume"  id="companyName-${currentPosition}thResume" class="font-normal text-sm relative   capitalize break-all  work-company-name">Campany / Institute Name
              </div>
              <div  class="flex gap-4">
                <div   data-cv-target="resume" id="companyLocation-${currentPosition}thResume"  class="font-normal text-sm relative   capitalize  work-company-location">Lahore Pakistan </div>
                <div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                    stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-map-pin">
                    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
                    <circle cx="12" cy="10" r="3" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
          <div data-cv-target="ckEditorContent" data-cv-id="editor${editorCounter}-content"  class="pl-[30px] font-normal leading-relaxed text-sm break-all work-company-about" >
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
            quod
            tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et vitae!
            Vitae,
            vel!
          </div>
        </div>
      </div>
      
      `
    else if(temp=="temp2")
      addworkResumeDiv.innerHTML = `
      <div class=" pt-2.5 ">
        <div data-cv-target="resumeheadingsfontchanger" class="flex gap-5  items-start ">
          <div  data-cv-target="resume" id="designation-${currentPosition}thResume" class="font-semibold text-lg  relative  break-words my-1 text-gray-800 uppercase "> Enter Your Position
          </div>
        </div>
        <div class="pb-2">
          <div  data-cv-target="resumeheadingsfontchanger"  class="flex justify-between gap-5  text-gray-500">
            <div data-cv-target="resume" id="companyName-${currentPosition}thResume"  class="font-normal text-sm relative  capitalize  break-words">Company / Institute Name
            </div>
            <div class=" grid grid-cols-5  gap-2">
              <div class="col-span-1 w-fit grid justify-end items-center">
                <div data-cv-target="bgChanger"  class=" p-1.5   rounded-full bg-indigo-500 bg-changer"></div>
              </div>
              <div data-cv-target="resume" id="companyDate-${currentPosition}thResume" class=" col-span-4 font-normal text-sm relative  capitalize  break-words "> Jan 2010-feb 2021 </div>
            </div>
          </div>
        </div>
        <div  data-cv-target="ckEditorContent" data-cv-id="editor${editorCounter}-content"   class="font-normal leading-relaxed text-sm  break-words ">
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
          quod tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et
          vitae!
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
          quod tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et
          vitae!
        </div>
      </div>
      
      `
    let removeButton = document.createElement('div')
      removeButton.innerHTML = `
      <button type="button" class="bg-red-500 hover:bg-red-600 transition-colors  absolute top-0 right-0  p-1 border border-transparent shadow-sm font-medium rounded-md text-white  text-center "><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg></button>
      `
    removeButton.onclick = () => this.removeformbtn(workFormDiv, resumeId,"work "); // Pass resumeId to the function
    workFormDiv.appendChild(removeButton)
    this.workAddTarget.appendChild(workFormDiv)
    this.workResumeTarget.appendChild(addworkResumeDiv)
    this.updateResumeField();
    this.changeFont();
    this.changeColor() ;
    const newEditorTarget = workFormDiv.querySelector('[data-cv-target="editor"]');
    const newContentTarget = addworkResumeDiv.querySelector('[data-cv-target="ckEditorContent"]');
    const cvId = `editor${editorCounter}`;

    if (newEditorTarget && newContentTarget) {
      this.CKEditor(newEditorTarget, newContentTarget, cvId);
    }

  }
  workFormAdded(event) {
    const temp = event.target.dataset.paramTemp;
    if(this.workCounter<5)
      this.workFormAdd(temp);
      else
      alert("You execed the limit , only 5 Allowed");
  }

  eduFormAdd(temp) {
      console.log(this.eduCounter)
    if(this.eduCounter%1==0.5)
      this.eduCounter +0.5;
    else
      this.eduCounter++;

    console.log(this.eduCounter)
  
    let  currentPosition=this.eduCounter;
    let editorCounter =  this.eduCounter + 1;
    editorCounter++;

    let eduFormDiv = document.createElement('div');
    eduFormDiv.classList.add('grid', 'gap-5', 'items-center','relative', 'pt-6');


   if(temp=="temp1")
      eduFormDiv.innerHTML = `

      <div class="flex gap-5 items-center">
      <div class="w-full">
        <label for="degreeName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th Degree</label>
          <input  data-cv-target="input" id="degreeName-${currentPosition}th" placeholder="Manager" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
    </div>
    <div class="w-full">
      <label for="instituteName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Institute</label>
        <input data-cv-target="input" id="instituteName-${currentPosition}th" placeholder="University of Management and Technology" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
    </div>
    </div>
    <div class="flex items-center gap-5">
      <div class="w-full">
        <label for="uniLocation-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Location</label>
          <input data-cv-target="input" id="uniLocation-${currentPosition}th" placeholder="DHA Lahore,Pakistan" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border"/>
      </div>
      <div class="w-full">
        <label for="degreeDate-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Date</label>
          <input  data-cv-target="input" id="degreeDate-${currentPosition}th" placeholder="Jan 2010-feb 2020" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
      </div>
    </div>


  <div class="w-full">
  <label for="eduExperience-${currentPosition}th"  class="md:mt-0 mt-2 font-medium text-gray-700" data-cv-label="About edu Experience" > About</label>
    <textarea data-cv-target="editor" data-cv-id="editor${editorCounter}"   name="about-${editorCounter}" rows="4" placeholder="I got 3.7 CGPA......" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border resize-none"></textarea>
    <button class="md:w-fit w-full flex my-3 md:justify-start justify-center  items-center  bg-gradient-to-br to-blue-950  from-sky-800 hover:bg-gradient-to-bl  py-2 px-4 border border-transparent shadow-sm text-xs font-medium rounded-md text-white  text-center" data-action="click->cv#generate" data-cv-button="About edu Experience" data-cv-label="About Work Experience" data-cv-id="editor${editorCounter}">
    <div class="">Auto Generate</div>
  <img alt="Loading" class="w-5 h-5 ml-2 hidden  " data-cv-target="loader" src="https://cdn.pixabay.com/animation/2023/05/02/04/29/04-29-06-428_512.gif">
  </button>
  </div>
      `
   else if(temp=="temp2")
      eduFormDiv.innerHTML = `
            <div class="flex gap-5 items-center">
            <div class="w-full">
              <label for="degreeName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th Degree</label>
                <input  data-cv-target="input" id="degreeName-${currentPosition}th" placeholder="Manager" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
          </div>
          <div class="w-full">
            <label for="instituteName-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Institute</label>
              <input data-cv-target="input" id="instituteName-${currentPosition}th" placeholder="University of Management and Technology" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
          </div>
          </div>
          <div class="flex items-center gap-5">
            <div class="w-full">
              <label for="degreeDate-${currentPosition}th" class="md:mt-0 mt-2 font-medium text-gray-700">Date</label>
                <input  data-cv-target="input" id="degreeDate-${currentPosition}th" placeholder="Jan 2010-feb 2020" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
            </div>
          </div>
          <div class="w-full">
          <label for="eduExperience-${currentPosition}th"  class="md:mt-0 mt-2 font-medium text-gray-700" data-cv-label="About edu Experience" > About</label>
          <textarea data-cv-target="editor" data-cv-id="editor${editorCounter}"  id="workExperience-${currentPosition}th" name="third_job_about_work" rows="4" placeholder="I got 3.7 CGPA......" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border resize-none"></textarea>
          <button class="md:w-fit w-full flex my-3 md:justify-start justify-center  items-center  bg-gradient-to-br to-blue-950  from-sky-800 hover:bg-gradient-to-bl  py-2 px-4 border border-transparent shadow-sm text-xs font-medium rounded-md text-white  text-center" data-action="click->cv#generate" data-cv-button="About Work Experience" data-cv-label="About Work Experience" data-cv-id="editor${editorCounter}">
          <div class="">Auto Generate</div>
          <img alt="Loading" class="w-5 h-5 ml-2 hidden  " data-cv-target="loader" src="https://cdn.pixabay.com/animation/2023/05/02/04/29/04-29-06-428_512.gif">
          </button>
          </div>
      `


    let addEduResumeDiv = document.createElement('div')
    let resumeId = `resumeEduAdd-${currentPosition}`
    addEduResumeDiv.id = resumeId
    if(temp=="temp1")
      addEduResumeDiv.innerHTML = `
      
      <div class="grid grid-cols-8">
        <div class="flex col-span-2 pr-2.5 year-section">
          <div class="pt-5">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
              fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round"
              stroke-linejoin="round" class="lucide lucide-chevron-right">
              <path d="m9 18 6-6-6-6" />
            </svg>
          </div>
          <div class="w-full">
            <div data-cv-target="resumeheadingsfontchanger"  class="text-base font-normal resumeFont ">Year</div>
            <div data-cv-target="resume" id="degreeDate-${currentPosition}thResume"  class="text-sm font-normal  text-gray-500 break-all ">Jan 2010-feb 2021</div>
          </div>
        </div>
        <div  class="border-l-2  border-black col-span-6  pt-5 work-section">
          <div data-cv-target="resumeheadingsfontchanger" class="flex gap-5 items-start -translate-y-2  -translate-x-[9px] resumeFont">
            <div class="p-1.5 bg-white border-2 shadow-sm rounded-full white-dot "></div>
            <div  data-cv-target="resume" id="degreeName-${currentPosition}thResume" class="font-normal text-lg relative -mt-1   break-all work-position-name uppercase">Enter Your Degree </div>
          </div>
          <div class="pl-[30px] pb-2 work-company-parent" >
            <div data-cv-target="resumeheadingsfontchanger"  class="flex justify-between gap-5 resumeFont  ">
              <div  data-cv-target="resume"  id="instituteName-${currentPosition}thResume" class="font-normal text-sm relative   capitalize break-all  work-company-name">University / Institute Name
              </div>
              <div  class="flex gap-4">
                <div   data-cv-target="resume" id="uniLocation-${currentPosition}thResume"  class="font-normal text-sm relative   capitalize  work-company-location">Lahore Pakistan </div>
                <div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                    stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-map-pin">
                    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
                    <circle cx="12" cy="10" r="3" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
          <div data-cv-target="ckEditorContent" data-cv-id="editor${editorCounter}-content"  class="pl-[30px] font-normal leading-relaxed text-sm break-all work-company-about" >
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
            quod
            tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et vitae!
            Vitae,
            vel!
          </div>
        </div>
      </div>
      
      `
    else if(temp=="temp2")
      addEduResumeDiv.innerHTML = `
      <div class=" pt-2.5 ">
        <div data-cv-target="resumeheadingsfontchanger" class="flex gap-5  items-start ">
          <div  data-cv-target="resume" id="degreeName-${currentPosition}thResume" class="font-semibold text-lg  relative  break-words my-1 text-gray-800 uppercase "> Enter Your Degree
          </div>
        </div>
        <div class="pb-2">
          <div  data-cv-target="resumeheadingsfontchanger"  class="flex justify-between gap-5  text-gray-500">
            <div data-cv-target="resume" id="instituteName-${currentPosition}thResume"  class="font-normal text-sm relative  capitalize  break-words">Unversity / Institute Name
            </div>
            <div class=" grid grid-cols-5  gap-2">
              <div class="col-span-1 w-fit grid justify-end items-center">
                <div data-cv-target="bgChanger"  class=" p-1.5   rounded-full bg-indigo-500 bg-changer"></div>
              </div>
              <div data-cv-target="resume" id="degreeDate-${currentPosition}thResume" class=" col-span-4 font-normal text-sm relative  capitalize  break-words "> Jan 2010-feb 2021 </div>
            </div>
          </div>
        </div>
        <div  data-cv-target="ckEditorContent" data-cv-id="editor${editorCounter}-content"   class="font-normal leading-relaxed text-sm  break-words ">
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
          quod tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et
          vitae!
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque facilis enim nobis nostrum
          quod tempora voluptate libero aperiam, ea ducimus fugiat voluptas sint natus autem iste et
          vitae!
        </div>
      </div>
      
      `
    let removeButton = document.createElement('div')
    removeButton.innerHTML = `
    <button type="button" class="bg-red-500 hover:bg-red-600 transition-colors  absolute top-0 right-0  p-1 border border-transparent shadow-sm font-medium rounded-md text-white  text-center "><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg></button>
    `
    removeButton.onclick = () => this.removeformbtn(eduFormDiv, resumeId,"education"); // Pass resumeId to the function
    eduFormDiv.appendChild(removeButton)
    this.eduAddTarget.appendChild(eduFormDiv)
    this.eduAddResumeTarget.appendChild(addEduResumeDiv)
    this.updateResumeField();
    this.changeFont();
    this.changeColor() ;
    const newEditorTarget = eduFormDiv.querySelector('[data-cv-target="editor"]');
    const newContentTarget = addEduResumeDiv.querySelector('[data-cv-target="ckEditorContent"]');
    const cvId = `editor${editorCounter}`;

    if (newEditorTarget && newContentTarget) {
      this.CKEditor(newEditorTarget, newContentTarget, cvId);
    }

  }

  eduFormAdded(event) {
    const temp = event.target.dataset.paramTemp;
    if(this.eduCounter<5)
      this.eduFormAdd(temp);
      else
      alert("You execed the limit , only 5 Allowed");
  }
  skillAdd(temp) {
    if(this.skillCounter%1==0.5)
      this.skillCounter +0.5;
    else
      this.skillCounter++;

    let currentPosition=this.skillCounter;

    let skillDiv = document.createElement('div');
    skillDiv.classList.add('grid', 'gap-5', 'items-center', 'relative',);


     skillDiv.innerHTML = `
    <div class=" grid gap-1 items-center">
    <div class="w-full">
      <label for="skill-${currentPosition}"class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th skill</label>
        <input data-cv-target="input" id="skill-${currentPosition}" name="skill-${currentPosition}" placeholder="skill" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border  "/>
  </div>
    <div class="w-full">
      <input  data-action="input->cv#skillHobbyRange"  data-div-id="skillrangeresume-${currentPosition}" data-level-id="skill-level-${currentPosition}"  type="range" class="w-full h-2 bg-gray-200 rounded-lg  cursor-pointer dark:bg-gray-700">
    </div>
  </div>
    `
    let skillAddResumeDiv = document.createElement('div')
    let resumeId = `resumeSkillAdd-${currentPosition}`
    skillAddResumeDiv.id = resumeId
    if(temp=="temp1")
      skillAddResumeDiv.innerHTML = `
      <div class="grid grid-cols-12  w-full items-center  ">
      <div class=" col-span-4 items-center ">
        <div data-cv-target="resume" id="skill-${currentPosition}Resume" class="break-words">Skill ${currentPosition}</div>
      </div>
      <div class="h-2  col-span-6 relative overflow-hidden rounded-2xl border border-gray-500 w-full">
        <div  id="skillrangeresume-${currentPosition}"  class="h-2 absolute inset-0 bg-black w-1/4"></div>
      </div>
      <span id="skill-level-${currentPosition}" class="col-span-2 grid justify-end">50%</span>
    </div>
      `
    else if( temp=="temp2")
      skillAddResumeDiv.innerHTML = `
      <div class=" space-y-3 items-center w-full ">
      <div class="flex justify-between">
        <div data-cv-target="resume" id="skill-${currentPosition}Resume" class="w-52 break-words uppercase font-medium ">Skill ${currentPosition}</div>
        <span id="skill-level-${currentPosition}">50%</span>
      </div>
      <div class="h-2 relative overflow-hidden  bg-slate-300  w-full">
        <div id="skillrangeresume-${currentPosition}" data-cv-target="bgChanger" class=" h-2 absolute inset-0 bg-indigo-500 w-1/2"></div>
      </div>
    </div>

      `
    let removeButton = document.createElement('div')
    removeButton.innerHTML = `
    <button type="button" class="bg-red-500 hover:bg-red-600 transition-colors  absolute bottom-[3.525rem] right-[8px]  p-[0.5rem] border border-transparent shadow-sm font-medium rounded-md text-white  text-center "><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg></button>
    `
    removeButton.onclick = () => this.removeformbtn(skillDiv, resumeId,"skill"); // Pass resumeId to the function
    skillDiv.appendChild(removeButton)
    this.skillAddTarget.appendChild(skillDiv)
    this.skillAddResumeTarget.appendChild(skillAddResumeDiv)
    this.updateResumeField();
    this.changeFont();
    this.changeColor() ;
    
  }
  skillAdded(event) {
    const temp = event.target.dataset.paramTemp;
    if(this.skillCounter<10)
      this.skillAdd(temp);
    else
      alert("You execed the limit , only 10 Allowed");
  }
  hobbyAdd(temp) {

    if(this.hobbyCounter%1==0.5)
      this.hobbyCounter +0.5;
    else
      this.hobbyCounter++;

    let currentPosition=this.hobbyCounter;

    let hobbyDiv = document.createElement('div');
    hobbyDiv.classList.add('grid', 'gap-5', 'items-center', 'relative',);


    hobbyDiv.innerHTML = `
    <div class=" grid gap-1 items-center">
    <div class="w-full">
      <label for="hobby-${currentPosition}"class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}th hobby</label>
        <input data-cv-target="input" id="hobby-${currentPosition}" name="hobby-${currentPosition}" placeholder="hobby" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border  "/>
  </div>
    <div class="w-full">
      <input  data-action="input->cv#skillHobbyRange"  data-div-id="hobbyrangeresume-${currentPosition}" data-level-id="hobby-level-${currentPosition}"  type="range" class="w-full h-2 bg-gray-200 rounded-lg  cursor-pointer dark:bg-gray-700">
    </div>
  </div>
    `
   
    let hobbyAddResumeDiv = document.createElement('div')
    let resumeId = `resumeHobbyAdd-${currentPosition}`
    hobbyAddResumeDiv.id = resumeId

   
    if(temp=="temp1")
    hobbyAddResumeDiv.innerHTML = `
    <div class="grid grid-cols-12  w-full items-center  ">
    <div class=" col-span-4 items-center ">
      <div data-cv-target="resume" id="hobby-${currentPosition}Resume" class="break-words">Hobby ${currentPosition}</div>
    </div>
    <div class="h-2 col-span-6 relative overflow-hidden rounded-2xl border border-gray-500 w-full">
      <div  id="hobbyrangeresume-${currentPosition}"  class="h-2 absolute inset-0 bg-black w-1/4"></div>
    </div>
    <span id="hobby-level-${currentPosition}" class="col-span-2  grid justify-end">50%</span>
   </div>
    `
    else if(temp=="temp2")
    hobbyAddResumeDiv.innerHTML = `
    <div class=" space-y-3 items-center w-full ">
    <div class="flex justify-between">
      <div data-cv-target="resume" id="hobby-${currentPosition}Resume" class="w-52 break-words uppercase font-medium ">Hobby ${currentPosition}</div>
      <span id="hobby-level-${currentPosition}">50%</span>
    </div>
    <div class="h-2 relative overflow-hidden  bg-slate-300  w-full">
      <div id="hobbyrangeresume-${currentPosition}" data-cv-target="bgChanger" class=" h-2 absolute inset-0 bg-indigo-500 w-1/2"></div>
    </div>
  </div>
    `
    let removeButton = document.createElement('div')
    removeButton.innerHTML = `
    <button type="button" class="bg-red-500 hover:bg-red-600 transition-colors  absolute bottom-[3.525rem] right-[8px]  p-[0.5rem] border border-transparent shadow-sm font-medium rounded-md text-white  text-center "><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg></button>
    `
    removeButton.onclick = () => this.removeformbtn(hobbyDiv, resumeId,"hobby"); // Pass resumeId to the function
    hobbyDiv.appendChild(removeButton)
    this.hobbyAddTarget.appendChild(hobbyDiv)
    this.hobbyAddResumeTarget.appendChild(hobbyAddResumeDiv)
    this.updateResumeField();
    this.changeFont();
    this.changeColor() ;
    
  }

  hobbyAdded(event) {
    const temp = event.target.dataset.paramTemp;
    if(this.hobbyCounter<10)
      this.hobbyAdd(temp);
    else
      alert("You execed the limit , only 10 Allowed");
  }

   referenceAdd() {
    if(this.referenceCounter%1==0.5)
      this.referenceCounter +0.5;
   else
      this.referenceCounter++;

    this.referenceAddResumeTarget.classList.add("block");
    this.referenceAddResumeTarget.classList.remove("hidden");
    let currentPosition=this.referenceCounter;

    let referenceDiv = document.createElement('div');
    referenceDiv.classList.add('grid', 'gap-2.5', 'items-center', 'relative',);
   

    let marks;
    if(currentPosition==1)
      marks="st";
    else if(currentPosition==2)
      marks="nd";
    else if(currentPosition==3)
      marks="rd";
     else
      marks="th";

    referenceDiv.innerHTML = `   
     <div class="referenceForm mt-4" >
      <div class="sm:flex grid sm:gap-5 gap-3 items-center">
        <div class="w-full">
          <label for="reference-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">${currentPosition}${marks} Reference</label>
            <input data-cv-target="input" id="reference-${currentPosition}" name="first_reference_name" placeholder="Badar munir" class="placeholder-gray-300 focus:ring-blue-200  py-4 focus:border-blue-200  block w-full p-3 sm:text-sm border-gray-200 rounded-lg border  "/>
      </div>
      <div class="w-full">
        
        <label for="referencePost-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Reference Post</label>
          <input data-cv-target="input"  id="referencePost-${currentPosition}"  name="first_reference_post" placeholder="CEO Applyace" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border  "/>
      </div>
      </div>
      <div class="sm:flex grid sm:gap-5 gap-3 items-center">
        <div class="w-full">
          <label for="referencePhone-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700">Phone</label>
            <input data-cv-target="input" name="first_reference_phone" id="referencePhone-${currentPosition}" placeholder="123-456-7890" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
        </div>
        <div class="w-full">
          <label for="referenceEmail-${currentPosition}" class="md:mt-0 mt-2 font-medium text-gray-700" >Email</label>
            <input data-cv-target="input" name="first_reference_email"  id="referenceEmail-${currentPosition}" placeholder="hi@badarmunir.com" class="placeholder-gray-300 focus:ring-blue-200 py-4 focus:border-blue-200 block w-full p-3 sm:text-sm border-gray-200 rounded-lg border "/>
        </div>
      </div>
    </div>
    `

    let referenceAddResumeDiv = document.createElement('div')
    let resumeId = `resumereferenceAdd-${currentPosition}`
    referenceAddResumeDiv.id = resumeId
     if(currentPosition==1)
      referenceAddResumeDiv.innerHTML =` 
      <div >
      <h1 data-cv-target="resumeheadingsfontchanger" class=" text-2xl font-semibold resumeFont ">Reference</h1>
      <div class="py-5 w-full">
      <div class="flex w-full gap-2  items-center -mt-5">
        <h1 data-cv-target="resumeheadingsfontchanger" class=" text-2xl font-semibold resumeFont text-center ">Details</h1>
        <div class="flex w-full items-center gap-2">
          <div class=" border-0 border-b-4 border-dotted border-sky-800 w-full"></div>
          <div data-cv-target="bgChanger"  class=" p-2  rounded-full bg-sky-800 bg-changer grid place-content-center relative  ">
            <svg xmlns="http://www.w3.org/2000/svg"  width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="lucide lucide-refresh-ccw">
              <path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
              <path d="M3 3v5h5" />
              <path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" />
              <path d="M16 16h5v5" />
            </svg>
          </div>
        </div>
      </div>
      </div>
      <div class="w-full pb-3 break-words">
      <div data-cv-target="resumeheadingsfontchanger" class="flex items-center resumeFont">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
          fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round"
          stroke-linejoin="round" class="lucide lucide-chevron-right">
          <path d="m9 18 6-6-6-6" />
        </svg>
        <div   data-cv-target="resume"   id="reference-${currentPosition}Resume" class="text-base font-normal  ">Badar munir</div>
      </div>
      <div data-cv-target="resume"  id="referencePost-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">CEO of Applyace</div>
      <div data-cv-target="resume"  id="referencePhone-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">0309481000</div>
      <div data-cv-target="resume"  id="referenceEmail-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">applyace.io@gmail.com</div>
      </div>
      </div>
      `
    else
      referenceAddResumeDiv.innerHTML = ` 
      <div class="w-full pb-3 break-words">
        <div data-cv-target="resumeheadingsfontchanger" class="flex items-center resumeFont">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
            fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round"
            stroke-linejoin="round" class="lucide lucide-chevron-right">
            <path d="m9 18 6-6-6-6" />
          </svg>
          <div   data-cv-target="resume"   id="reference-${currentPosition}Resume" class="text-base font-normal  ">Badar munir</div>
        </div>
        <div data-cv-target="resume"  id="referencePost-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">CEO of Applyace</div>
        <div data-cv-target="resume"  id="referencePhone-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">0309481000</div>
        <div data-cv-target="resume"  id="referenceEmail-${currentPosition}Resume" class="text-xs font-normal  text-gray-500 pl-4 ">applyace.io@gmail.com</div>
      </div>
      `
 
    let removeButton = document.createElement('div')
    removeButton.innerHTML = `
    <button type="button" class="bg-red-500 hover:bg-red-600 transition-colors  absolute top-0 right-0 mb-2  p-1 border border-transparent shadow-sm font-medium rounded-md text-white  text-center "><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg></button>
    `
    removeButton.onclick = () => this.removeformbtn(referenceDiv, resumeId,"reference"); // Pass resumeId to the function
    referenceDiv.appendChild(removeButton)
    this.referenceAddTarget.appendChild(referenceDiv)
    this.referenceAddResumeTarget.appendChild(referenceAddResumeDiv)
    this.updateResumeField();
    this.changeFont();
    this.changeColor() ;
  }

  referenceAdded() {
    if(this.referenceCounter<5)
      this.referenceAdd();
    else
      alert("You execed the limit , only 5 Allowed");
  }


  removeformbtn(element, elementId,functionName) {

    if(functionName=="work")
      this.workCounter--;
    if(this.workCounter==this.workCounter)
      this.workCounter +0.5;

    if(functionName=="education")
       this.eduCounter--;

  if(functionName=="education"){
    if(this.eduCounter==this.eduCounter)
       this.eduCounter +0.5;
  }

    console.log(this.eduCounter)

    if(functionName=="reference")
       this.referenceCounter--;
    if(this.referenceCounter==this.referenceCounter)
      this.referenceCounter +0.5;
    
    if(functionName=="skill")
      this.skillCounter--;
    if(this.skillCounter==this.skillCounter)
      this.skillCounter +0.5;

    if(functionName=="hobby")
      this.hobbyCounter--;
    if(this.hobbyCounter==this.hobbyCounter)
      this.hobbyCounter +0.5;

    element.remove();

    let removeAdded = document.getElementById(elementId);
    if (removeAdded) {
        removeAdded.remove();
    }
    if(functionName=="reference"){
      if (this.referenceCounter==0) {
        this.referenceAddResumeTarget.classList.add("hidden");
      }
  }
    
  }

  skillHobbyRange(event) {
    const input = event.target
    const value = input.value
    const divId = input.dataset.divId
    const levelId = input.dataset.levelId
    const elementInside = document.getElementById(divId)
    elementInside.style.width = `${value}%`
    const levelElement = document.getElementById(levelId)
    levelElement.textContent = `${value}%`

  }
  updatePhoto(event) {
    const file = event.target.files[0]
    const reader = new FileReader()
    reader.onload = () => {
      const imageDataUrl = reader.result
      this.photoDisplayTargets.forEach((display, index) => {
        display.src = imageDataUrl;
        if (index === 0) {
          display.classList.add('h-16', 'w-16', 'object-cover');
        }
      });
      this.uploadTextTarget.classList.add("hidden")
      this.deleteTextTarget.classList.remove("hidden")
      this.imgcontainerHiderTarget.classList.remove("hidden")
    }

    reader.readAsDataURL(file)
  }

  updateCvPhoto(event) {
    const file = event.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = () => {
        const imageDataUrl = reader.result
        this.photoDisplayTargets.forEach((display, index) => {
          display.src = imageDataUrl;
          if (index === 0) {
            display.classList.add('relative');
          }
        });
        const updatedPhoto = document.getElementById('updatedcvPhoto');
        const dbPhoto = document.getElementById('dbCvPhoto');
        dbPhoto.classList.add('hidden');
        updatedPhoto.classList.remove('hidden');
        this.uploadTextTarget.classList.add("hidden")
        this.deleteTextTarget.classList.remove("hidden")
        this.imgcontainerHiderTarget.classList.remove("hidden")
      }
      reader.readAsDataURL(file)
    }


  }

  deletePhoto() {
    const confirmed = confirm("Are you sure you want to delete the picture?");

    if (confirmed) {
      this.element.querySelector("#photoInput").value = "";

      // Update the first photo
      const firstPhoto = this.photoDisplayTargets[0];
      firstPhoto.src = 'data:image/svg+xml;charset=utf-8,<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 122.88 95.52"><title>upload-image</title><path d="M5.68,12.23H61.14a36.79,36.79,0,0,0-2.3,6.7H6.74V88.78h98.72V63.65a37.49,37.49,0,0,0,6.7-2.64V89.88a5.58,5.58,0,0,1-1.65,4,1.6,1.6,0,0,1-.3.26,5.48,5.48,0,0,1-3.73,1.4H5.64a5.61,5.61,0,0,1-4-1.66,5.68,5.68,0,0,1-1.65-4v-72a5.63,5.63,0,0,1,5.64-5.63ZM95.19,0A27.69,27.69,0,1,1,67.51,27.68,27.68,27.68,0,0,1,95.19,0Zm-4,41h8.07a2.91,2.91,0,0,0,2.91-2.9V28.91h5.12a2.4,2.4,0,0,0,2.06-1c1.07-1.61-.39-3.2-1.42-4.33C105,20.44,98.47,14.69,97,13a2.35,2.35,0,0,0-3.7,0C91.86,14.73,85,20.83,82.2,23.92c-1,1.07-2.14,2.54-1.14,4a2.41,2.41,0,0,0,2,1h5.15v9.23A2.91,2.91,0,0,0,91.17,41ZM29,31.78a8.1,8.1,0,1,1-8.09,8.09A8.09,8.09,0,0,1,29,31.78ZM63,66.51,69.68,55a37.3,37.3,0,0,0,19.66,9.61l7.07,18.2H16.16V76.63l6.74-.34,6.74-16.52L33,71.57H43.13L51.9,49,63,66.51Z"/></svg>';
      firstPhoto.classList.remove('h-16', 'w-16', 'object-cover');

      // Reset the second photo
      const secondPhoto = this.photoDisplayTargets[1];
      secondPhoto.src = '';

      this.uploadTextTarget.classList.remove("hidden");
      this.deleteTextTarget.classList.add("hidden");
      this.imgcontainerHiderTarget.classList.add("hidden");
    }
  }


  changeFont() {
    const selectedFont = this.selectFontTarget.value;
    this.resumeFontchangerAllTarget.style.fontFamily = selectedFont;
    this.resumeheadingsfontchangerTargets.forEach(element => {
      element.style.fontFamily = selectedFont;
    });
  }
  changeColor() {
    const defaultColor = '#2c5282';
    const newColor = this.colorInputTarget.value;
    const startsWithF = /^#f[0-9a-fA-F]{2,6}$/;

    if (startsWithF.test(newColor)) {
        this.bgChangerTargets.forEach(element => {
            element.style.backgroundColor = defaultColor;
        });

        this.textColorChangerTargets.forEach(element => {
            element.style.color = defaultColor;
        });

        this.svgChangerTargets.forEach(element => {
            element.setAttribute('stroke', defaultColor); // Set default color to stroke
        });

        this.colorInputTarget.value = defaultColor;
    } else {
        this.bgChangerTargets.forEach(element => {
            element.style.backgroundColor = newColor;
        });

        this.textColorChangerTargets.forEach(element => {
            element.style.color = newColor;
        });

        this.svgChangerTargets.forEach(element => {
            element.setAttribute('stroke', newColor); // Set new color to stroke
        });
    }
}



downloadPDF() {
  if (window.matchMedia('(min-width: 768px)').matches) {
      // Execute this code if the screen width is 768px or larger (computer screen)
      $(this.cvCaptureTarget).printThis();
  } else {
      // Execute this code if the screen width is less than 768px (mobile screen)
      var opt = {
          margin:       0.5,
          filename:     'myfile.pdf',
          image:        { type: 'png', quality: 1 },
          html2canvas:  { scale: 2 },
          jsPDF:        { unit: 'in', format: 'a3', orientation: 'portrait' },
          pagebreak:    { mode: ['avoid-all']}
      };
      html2pdf().set(opt).from(this.cvCaptureTarget).save();
  }
}

CKEditor(editorTarget, contentTarget, cvId) {
  ClassicEditor
    .create(editorTarget, {
      toolbar: {
        items: [
          'heading',
          '|',
          'bold',
          'italic',
          'bulletedList',
          'numberedList',
          '|',
          'link',
          '|',
          'outdent',
          'indent',
        ],
        shouldNotGroupWhenFull: true
      },
      language: 'en',
      link: {
        addTargetToExternalLinks: true,
        defaultProtocol: 'https://' // Set the default protocol for links
      }
    })
    .then(editor => {
      this.ckEditorInstances.push({ id: cvId, editor, contentTarget });
      editor.model.document.on('change:data', () => {
        const content = editor.getData();
        contentTarget.innerHTML = content;
      });
    })
    .catch(error => {
      console.error(error);
    });
}


  CKEditorAll() {
    this.ckEditorInstances = [];
    this.editorTargets.forEach((editorTarget, index) => {
      const contentTarget = this.ckEditorContentTargets[index];
      const cvId = editorTarget.dataset.cvId;
      this.CKEditor(editorTarget, contentTarget, cvId);
    });
  }


generate(event) {
    event.preventDefault();
    const apiKey = document.querySelector('[data-api-key]').dataset.apiKey;
    const clickedButton = event.currentTarget;
    const loader = clickedButton.querySelector("[data-cv-target='loader']");
    loader.classList.remove("hidden");
    const label = clickedButton.dataset.cvLabel;
    const cvId = clickedButton.dataset.cvId;
    const editorIndex = this.ckEditorInstances.findIndex(instance => instance.id === cvId);

    // Collect job information
    const jobInfo = document.querySelector("#jobTitle").value;

    // Collect all degree and institute information
    const degreeElements = document.querySelectorAll("[degreeValue]");
    const instituteElements = document.querySelectorAll("[instituteValue]");
    let degrees = Array.from(degreeElements).map(el => el.value).filter(Boolean); // Get values and filter out empty ones
    let institutes = Array.from(instituteElements).map(el => el.value).filter(Boolean); // Get values and filter out empty ones

    let prompt;
   
    if (degrees.length > 0 && institutes.length > 0) {
      const degreeInfo = degrees.join(', '); // Join all degrees
      const instituteInfo = institutes.join(', '); // Join all institutes
      prompt = `I'm creating a CV for Fang company. Please help me write a brief ${label} (up to 5 lines) that highlights the key accomplishments and skills relevant to this position (don't generate (*,[],#,{}) or any kind of symbol generate text plain) Degree ${degreeInfo} and institute ${instituteInfo}`;
    } else if (jobInfo) {
      prompt = `I'm creating a CV for Fang company. Please help me write a brief ${label} (up to 5 lines) that highlights the key accomplishments and skills relevant to this position (don't generate (*,[],#,{}) or any kind of symbol generate text plain) job title is ${jobInfo}`;
    } else {
      alert("You haven't provided Job Title or Degree and Institute information. A default CV section will be generated.");
      prompt = `I'm creating a CV for Fang company. Please help me write a brief ${label} (up to 5 lines) that highlights the key accomplishments and skills relevant to this position (don't generate (*,[],#,{}) or any kind of symbol generate text plain) job title is ${defaultJobInfo}, Degree ${defaultDegree}, and institute ${defaultInstitute}`;
    }

    if (editorIndex !== -1 && this.ckEditorInstances[editorIndex]) {
      const apiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

      fetch(`${apiEndpoint}?key=${apiKey}`, {  // Accessing API key from environment variable
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      })
        .then(response => response.json())
        .then(data => {
          const generatedText = data.candidates[0].content.parts[0].text;
          const cleanedText = generatedText.replace(/\./g, '').replace(/<br\s*\/?>/g, '');
          this.ckEditorInstances[editorIndex].editor.setData(cleanedText.trim());
        })
        .catch(error => {
          console.error("Error:", error);
        })
        .finally(() => {
          loader.classList.add("hidden");
        });
    } else {
      loader.classList.add("hidden");
    }
  }

  
}
